/*

"command line report view"
C:\frank\MathematicTest>C:\frank\allure-2.7.0\bin\allure serve allure-results
Generating report to temp directory...
Report successfully generated to C:\Users\frank\AppData\Local\Temp\3039028950687989338\allure-report
Starting web server...
2021-04-24 12:46:48.518:INFO::main: Logging initialized @5203ms to org.eclipse.jetty.util.log.StdErrLog
Server started at <http://192.168.99.1:54765/>. Press <Ctrl+C> to exit

Note: with this solution you need to restart 'allure serve allure-results' each time to see modifications

"deported report view"
1/ Report can also be generated by mvn allure:report
   It can be tested with mvn test ( or mvn -Dmaven.test.failure.ignore=true test allure:report )
   Note : the -Dmaven.test.failure.ignore=true is set to continue and do report generation
       it could also be set with
            <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <testFailureIgnore>true</testFailureIgnore>
            </configuration>
          </plugin>
      in pom.xml
2/ install nginx
     in configuration (nginx.conf), set path:

             server {
                listen       8099;
                server_name  localhost;

                #charset koi8-r;

                #access_log  logs/host.access.log  main;

                location / {
                    root "C:/frank/MathematicTest/target/site/allure-maven-plugin/";
                    index  index.html index.htm;
            }
3/ using a browser you can see your report - it is updated at each build, just need to refresh the page in browser

*/

import io.qameta.allure.Description;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import org.junit.jupiter.api.*;

@Epic("Basic Math Tests Epic")
@Feature("basic operations")
public class BasicMathTest {

    @BeforeAll
    static void initAll() {
        System.out.println("beforeAll");
    }

    @BeforeEach
    void init() {
        System.out.println("beforeEach");
    }

    @AfterEach
    void tearDown() {
        System.out.println("afterEach");
    }

    @AfterAll
    static void tearDownAll() {
        System.out.println("afterAll");
    }

    @Test
    @DisplayName("Addition test")
    @Story("User is doing addition.")
    @Description("This is the test of addition of 4 & 2.")
    public void addTest () {
        Assertions.assertTrue (BasicMath.add(4,2) == 6);
    }

    @Test
    @DisplayName("Substraction test")
    @Story("User is doing substraction.")
    @Description("This is the test of substraction of 4 & 2.")
    public void subTest () {
        Assertions.assertTrue (BasicMath.sub(4,2) == 2);
    }

    @Test
    @DisplayName("Multiplication test")
    @Story("User is doing multiplication.")
    @Description("This is the test of multiplication of 4 by 2.")
    public void mulTest () {
        Assertions.assertTrue (BasicMath.mul(4,2) == 8);
    }

    @Test
    @DisplayName("Division test")
    @Story("User is doing division.")
    @Description("This is the test of division of 4 by 2.")
    public void divTest () {
        Assertions.assertTrue (BasicMath.div(4,2) == 2);
    }
}
